package com.coforge.training.agribid.farmer.model;


import java.util.List;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

@Table(name = "personal_details")
@Entity
public class Farmer {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(name = "full_name")
	@NotBlank(message = "Full name is mandatory")
	private String fullName;

	@Column(name = "contact_no", unique = true, nullable = false)
	@NotBlank(message = "Contact number is mandatory")
	private Long contactNo;

	@Column(name = "email_id", nullable = false)
	@NotBlank(message = "Email ID is mandatory")
	@Email(message = "Email should be valid")
	private String emailId;

	@Column(name = "account_no")
	@NotBlank(message = "Account number is mandatory")
	private String accountNo;

	@Column(name = "ifsc_code")
	@NotBlank(message = "IFSC code is mandatory")
	private String ifscCode;

	@Column(name = "password")
	@NotBlank(message = "Password is mandatory")
	@Size(min = 8, message = "Password must be at least 8 characters long")
	private String password;

	@Column(name = "confirm_password")
	@NotBlank(message = "Confirm password is mandatory")
	@Size(min = 8, max = 255, message = "Password must contain between 8 and 255 characters")
	private String confirmPassword;

	@OneToMany(mappedBy = "farmer", cascade = CascadeType.ALL)
	private List<Crop> crop;


   @JsonBackReference
	@OneToOne(mappedBy = "farmer", cascade = CascadeType.ALL)
	private Address address;
	
    @Lob
    @JsonIgnore
    private byte[] aadhaar;
    
    @Lob
    @JsonIgnore
    private byte[] pan;
    
    @Lob
    @JsonIgnore
    private byte[] certificate;
  
    @NotBlank(message = "Land Area is mandatory")
    private String landArea;
    
    @NotBlank(message = "LAnd Address is mandatory")
    private String landAddress;
    
    @NotBlank(message = "land Pinocode is mandatory")
    private long landPincode;
    
   
  
	
	
	public Farmer() {
		super();
	
	}


	public Farmer(Long id, @NotBlank(message = "Full name is mandatory") String fullName,
			@NotBlank(message = "Contact number is mandatory") Long contactNo,
			@NotBlank(message = "Email ID is mandatory") @Email(message = "Email should be valid") String emailId,
			@NotBlank(message = "Account number is mandatory") String accountNo,
			@NotBlank(message = "IFSC code is mandatory") String ifscCode,
			@NotBlank(message = "Password is mandatory") @Size(min = 8, message = "Password must be at least 8 characters long") String password,
			@NotBlank(message = "Confirm password is mandatory") @Size(min = 8, max = 255, message = "Password must contain between 8 and 255 characters") String confirmPassword,
			List<Crop> crop, Address address, byte[] aadhaar, byte[] pan, byte[] certificate,
			@NotBlank(message = "Land Area is mandatory") String landArea,
			@NotBlank(message = "LAnd Address is mandatory") String landAddress,
			@NotBlank(message = "land Pinocode is mandatory") long landPincode) {
		super();
		this.id = id;
		this.fullName = fullName;
		this.contactNo = contactNo;
		this.emailId = emailId;
		this.accountNo = accountNo;
		this.ifscCode = ifscCode;
		this.password = password;
		this.confirmPassword = confirmPassword;
		this.crop = crop;
		this.address = address;
		this.aadhaar = aadhaar;
		this.pan = pan;
		this.certificate = certificate;
		this.landArea = landArea;
		this.landAddress = landAddress;
		this.landPincode = landPincode;
	}


	public byte[] getCertificate() {
		return certificate;
	}


	public void setCertificate(byte[] certificate) {
		this.certificate = certificate;
	}


	

	public String getLandArea() {
		return landArea;
	}

	public void setLandArea(String landArea) {
		this.landArea = landArea;
	}

	public String getLandAddress() {
		return landAddress;
	}

	public void setLandAddress(String landAddress) {
		this.landAddress = landAddress;
	}

	public long getLandPincode() {
		return landPincode;
	}

	public void setLandPincode(long landPincode) {
		this.landPincode = landPincode;
	}

	public byte[] getAadhaar() {
		return aadhaar;
	}

	public void setAadhaar(byte[] aadhaar) {
		this.aadhaar = aadhaar;
	}

	public byte[] getPan() {
		return pan;
	}

	public void setPan(byte[] pan) {
		this.pan = pan;
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}


	public List<Crop> getCrop() {
		return crop;
	}

	public void setCrop(List<Crop> crop) {
		this.crop = crop;
	}

	// Getters and Setters
	public String getFullName() {
		return fullName;
	}

	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

	public Long getContactNo() {
		return contactNo;
	}

	public void setContactNo(Long contactNo) {
		this.contactNo = contactNo;
	}

	public String getEmailId() {
		return emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}


	public String getAccountNo() {
		return accountNo;
	}

	public void setAccountNo(String accountNo) {
		this.accountNo = accountNo;
	}

	public String getIfscCode() {
		return ifscCode;
	}

	public void setIfscCode(String ifscCode) {
		this.ifscCode = ifscCode;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getConfirmPassword() {
		return confirmPassword;
	}

	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}

}


