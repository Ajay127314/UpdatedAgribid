package com.coforge.training.agribid.farmer.model;
 
 
import java.util.ArrayList;
import java.util.List;
 
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
 
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
 
 
@Setter
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "personal_details")
@Entity
public class Farmer {
 
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
 
	@Column(name = "full_name")
	@NotBlank(message = "Full name is mandatory")
	private String fullName;
 
	@Column(name = "contact_no", unique = true, nullable = false)
	@NotBlank(message = "Contact number is mandatory")
	private Long contactNo;
 
	@Column(name = "email_id", nullable = false)
	@NotBlank(message = "Email ID is mandatory")
	@Email(message = "Email should be valid")
	private String emailId;
 
	@Column(name = "account_no")
	@NotBlank(message = "Account number is mandatory")
	private String accountNo;
 
	@Column(name = "ifsc_code")
	@NotBlank(message = "IFSC code is mandatory")
	private String ifscCode;
 
	@Column(name = "password")
	@NotBlank(message = "Password is mandatory")
	@Size(min = 8, message = "Password must be at least 8 characters long")
	private String password;
 
	@Column(name = "confirm_password")
	@NotBlank(message = "Confirm password is mandatory")
	@Size(min = 8, max = 255, message = "Password must contain between 8 and 255 characters")
	private String confirmPassword;
 
	@JsonBackReference
	@OneToMany(mappedBy = "fId", cascade = CascadeType.ALL)
	private List<Crop> crops = new ArrayList<>();
 
 
//	@JsonBackReference
	@OneToOne(mappedBy = "farmer", cascade = CascadeType.ALL)
	private Address address;
	
    @Lob
    @JsonIgnore
    private byte[] aadhaar;
    
    @Lob
    @JsonIgnore
    private byte[] pan;
    
    @Lob
    @JsonIgnore
    private byte[] certificate;
  
    @NotBlank(message = "Land Area is mandatory")
    private String landArea;
    
    @NotBlank(message = "LAnd Address is mandatory")
    private String landAddress;
    
    @NotBlank(message = "land Pinocode is mandatory")
    private long landPincode;
    
   
	public byte[] getCertificate() {
		return certificate;
	}
 
 
	public void setCertificate(byte[] certificate) {
		this.certificate = certificate;
	}
 
 
 
 
 
}
 